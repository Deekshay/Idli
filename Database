/*
 * trial1.cpp

 *
 *  Created on: Apr 15, 2014
 *      Author: Krithika
 */


#include "rc.h"
#include<iostream>
#include<stdio.h>
#include <string>
#include <time.h>
#include<ctime>
#include<sys/time.h>
#include<queue>
#include<map>
#include<thread>


using namespace std;
//class Item
//{
//public:

void Item::weightupdate(float wt)
{
	status="back in";
	weight=wt;
	Timer=0;
}
void Item::statusupdate()
{
	status="gone out";
	time(&Timer);

}
void Item::Timerupdate()
{
	status="deleted";
}
void Item:: getrfid()
{
cout<<"Enter rfid"<<endl;
cin>>rfid;
}
void Item::objectdetect ()
{
cout<<"Enter object name"<<endl;
cin>>name;
}
void Item::getbarcode()
{
	cout<<"Enter barcode"<<endl;
cin>>barcode;
}
string Item::getname()
{
	return name;
}
void Item::getweight()
{
cout<<"enter the weight"<<endl;
cin>>weight;
}

void Item::display()
{
	  double diff;

                cout <<rfid <<endl;
                cout<<barcode<<endl;
                cout<<weight<<endl;
                cout<<name<<endl;
                cout<<Timer<<endl;
            //   cout<<clock()<<"	what's up"<<endl;
              //  diff = ( std::clock() - Timer ) / (double)CLOCKS_PER_SEC;
                //cout<<diff<<"time elapsed"<<endl;
}

//};
queue <Item> available;
void add(Item);
void find(int);
void update(int,float);

map <int,Item> mymap;
map <int, Item> :: iterator it;

void mainthread()
{
	Item Item;
	int choice, rfout,temp_weight;
   while(1)
    {

		cout<<"what do you want to do"<<endl;
		cout<<"Put new stuff in fridge 1 "<<endl;
		cout<<"take stuff 2"<<endl;
		cout<<"put back stuff 3"<<endl;
        cout<<"display"<<endl;
		cin>>choice;
		switch(choice)
		{
		case 1:
			cout<<"enter the details of Item"<<endl;
					Item.getbarcode();
					Item.getrfid();
					Item.getweight();
					Item.objectdetect();
					add(Item);
					break;
		case 2:
			cout<<"which Grocery do u want to take out"<<endl;
			cin>>rfout;
			find(rfout);
			break;

		case 3:
			cout<<"which Grocery do u want to put in"<<endl;
			cin>>rfout;
			cout<<"what is the weight now"<<endl;
			cin>>temp_weight;
			update(rfout,temp_weight);
			break;
        case 4:
        for (it=mymap.begin(); it!=mymap.end(); ++it)
        it->second.display();
        break;
		}
    }

}

void Timeint()
{
 time_t tempt;
	   time (&tempt);

	   	for (it=mymap.begin(); it!=mymap.end(); ++it)
			{
			float time_elapsed=(tempt-it->second.Timer);
				if(time_elapsed==86400)
					it->second.Timerupdate();
					mymap.erase(it);

			}
}


int main()
{
	thread first (mainthread);
    thread second (Timeint);
    first.join();
    second.join();
    return 0;
}


void add(Item stuff)
{
	static int i=0;
	char c;
	for (it=mymap.begin(); it!=mymap.end(); ++it)
		{
			if(it->second.rfid==stuff.rfid)
				cout<<"RFID Exists do u want to remove "<<it->second.getname()<<"from the list (Y OR N)";
				cin>>c;
				switch(c)
				{
				case 'Y':
					it->second.Timerupdate();
					mymap.erase(it);
					break;
				case 'N':
					cout<<"try another rfid";
					cin>>stuff.rfid;
					add(stuff);
					break;
				}
		}
	//mymap.insert ( std::pair<int,Item> (i,stuff) );
		mymap[i]=stuff;
	i++;
}

void find(int rfid)
{
	for (it=mymap.begin(); it!=mymap.end(); ++it)
	{
		if(it->second.rfid==rfid)
			it->second.statusupdate();
	}
}


void update(int rfid, float weight)
{
	for (it=mymap.begin(); it!=mymap.end(); ++it)
		{
			if(it->second.rfid==rfid)
				it->second.weightupdate(weight);
		}
}





